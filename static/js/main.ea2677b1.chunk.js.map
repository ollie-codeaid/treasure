{"version":3,"sources":["components/ClueForm.tsx","constants.ts","images/map.png","pages/CluePage.tsx","skeleton/Skeleton.tsx","images/treasureClosed.png","pages/WelcomePage.tsx","images/treasure.png","pages/FinalPage.tsx","index.js"],"names":["ClueForm","props","Form","onChange","formValues","setFormValues","answer","onSubmit","FormField","name","TextInput","type","textAlign","formError","Box","pad","vertical","Text","color","align","Button","label","FADE_OUT","slugifyAnswer","toLowerCase","replaceAll","CluePage","clue","useState","value","setValue","answerCorrect","setAnswerCorrect","setFormError","formSubmitted","setFormSubmitted","redirect","setRedirect","useEffect","setTimeout","hint","boxFade","duration","to","animation","Image","width","src","mapPath","text","map","index","theme","global","colors","background","highlight","focus","border","font","family","size","height","button","radius","Skeleton","children","Grommet","full","image","repeat","justify","fill","WelcomePage","title","firstClueSlug","buttonClicked","setButtonClicked","Heading","treasureClosedPath","onClick","FinalPage","treasurePath","Routes","Object","keys","data","lastAnswerSlug","values","slice","entries","clueSlug","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea2677b1.chunk.js","sourcesContent":["import React from 'react';\n\nimport {\n  Button,\n  Box,\n  Form,\n  FormField,\n  Text,\n  TextInput,\n} from 'grommet';\n\ninterface Props {\n    onSubmit: () => void;\n    setFormValues: (value: string) => void;\n    formError: string;\n}\n\nexport default function ClueForm(props: Props) {\n    return (\n    <Form\n        // @ts-ignore\n        onChange={(formValues) => props.setFormValues(formValues.answer)}\n        onSubmit={() => props.onSubmit()}\n      >\n        <FormField name='answer'>\n          <TextInput name='answer' type='text' textAlign='center'/>\n        </FormField>\n        {props.formError && (\n          <Box pad={{ vertical: 'small' }}>\n            <Text color='status-error' textAlign='center'>{props.formError}</Text>\n          </Box>\n        )}\n        <Box align={'center'} pad={{vertical: 'large'}}>\n          <Button type='submit' label='SUBMIT?'/>\n        </Box>\n      </Form>\n    )\n}","export const FADE_OUT = 2000;\nexport const FADE_IN = 4000;","export default __webpack_public_path__ + \"static/media/map.38d92d71.png\";","import React, { useEffect, useState } from 'react';\nimport {Redirect} from 'react-router-dom';\n\nimport {Box, Image, Text} from 'grommet';\n\nimport ClueForm from '../components/ClueForm';\nimport { FADE_IN, FADE_OUT } from '../constants';\nimport mapPath from '../images/map.png';\n\ninterface Clue {\n  title: string,\n  text: string[],\n  hint: string,\n  answer: string\n}\n\ninterface Props {\n  clue: Clue\n}\n\nconst slugifyAnswer = (answer: string): string => {\n  return answer.toLowerCase().replaceAll(' ', '-');\n}\n\nfunction CluePage({clue}: Props) {\n  const [value, setValue] = useState<string>(\"\");\n  const [answerCorrect, setAnswerCorrect] = useState<boolean>(false)\n  const [formError, setFormError] = useState<string>(\"\");\n  const [formSubmitted, setFormSubmitted] = useState<boolean>(false);\n  const [redirect, setRedirect] = useState<boolean>(false);\n\n  useEffect(() => {\n    const slugAnswer = slugifyAnswer(value);\n\n    if (slugAnswer === clue.answer) {\n      setAnswerCorrect(true);\n      setTimeout(() => setRedirect(true), FADE_OUT);\n    } else if (formSubmitted) {\n      setFormError(clue.hint);\n      setFormSubmitted(false);\n    }\n  }, [formSubmitted]);\n\n  const boxFade = answerCorrect ? 'fadeOut' : 'fadeIn';\n  const duration = answerCorrect ? FADE_OUT : FADE_IN;\n\n  return redirect ? (\n    <Redirect to={`/treasure/${slugifyAnswer(value)}/`}/>\n    ) : (\n      <Box\n        pad='large'\n        animation={{ type: boxFade, duration: duration }}\n        align='center'\n      >\n        <Image\n          width='150px'\n          src={mapPath}\n        />\n        <Box align='center'>\n          {clue.text.map((text: string, index: number) => (\n            <Text key={`${index}`} textAlign={'center'}>{text}</Text>\n          ))}\n        </Box>\n        <ClueForm\n          onSubmit={() => setFormSubmitted(true)}\n          setFormValues={setValue}\n          formError={formError}\n        />\n      </Box>\n    )\n}\n\nexport default CluePage;\n","import React from 'react';\n\nimport { Box, Grommet } from 'grommet';\n\nconst theme = {\n  global: {\n    colors: {\n      theme: '#921D46',\n      background: '#ccc1b3',\n      highlight: '#1D050E',\n      text: {\n        \"dark\": \"#f8f8f8\", \n        \"light\": \"#333333\"\n      }\n    },\n    focus: {\n      border: {\n        color: 'highlight'\n      }\n    },\n    font: {\n      family: 'Quattrocento Sans',\n      size: '18px',\n      height: '20px'\n    },\n  },\n  button: {\n    border: {\n      radius: '18px',\n      color: 'theme'\n    },\n    color: 'theme'\n  }\n};\n\nconst backgroundImageUrl = 'url(https://www.transparenttextures.com/patterns/fresh-snow.png)';\n\nconst Skeleton: React.FC<{}> = ({children}) => (\n  <Grommet theme={theme} full={true} background={{color: 'background', image: backgroundImageUrl, repeat: 'repeat', size: 'contain'}}>\n    <Box justify={'center'} fill={'vertical'}>\n      {children}\n    </Box>\n  </Grommet>\n);\n\nexport default Skeleton;\n","export default __webpack_public_path__ + \"static/media/treasureClosed.6b9631e6.png\";","import React, { useEffect, useState } from 'react';\nimport {Redirect} from 'react-router-dom';\n\nimport {Box, Button, Heading, Image, Text} from 'grommet';\nimport { FADE_OUT } from '../constants';\nimport treasureClosedPath from '../images/treasureClosed.png';\n\ninterface Props {\n  title: string,\n  text: string[],\n  firstClueSlug: string\n}\n\nfunction WelcomePage({title, text, firstClueSlug}: Props) {\n  const [buttonClicked, setButtonClicked] = useState<boolean>(false);\n  const [redirect, setRedirect] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (buttonClicked) {\n      setTimeout(() => setRedirect(true), FADE_OUT);\n    }\n  }, [buttonClicked]);\n\n  const duration = FADE_OUT;\n\n  return redirect ? (\n      <Redirect to={`/treasure/${firstClueSlug}/`}/>\n    ) : (\n      <Box\n        pad='large'\n        animation={buttonClicked ? { type: 'fadeOut', duration: duration } : {}}\n        align='center'\n      >\n        <Box align='center'>\n          <Heading textAlign='center' color='theme'>Welcome to the {title} treasure hunt!</Heading>\n          {text.map((text: string, index: number) => (\n            <Text key={`${index}`} textAlign={'center'}>{text}</Text>\n          ))}\n          <Image\n            width='150px'\n            src={treasureClosedPath}\n          />\n        </Box>\n        <Box align={'center'} pad={{vertical: 'large'}}>\n          <Button\n            onClick={() => setButtonClicked(true)}\n            label='PROCEED?'\n          />\n        </Box>\n      </Box>\n    )\n}\n\nexport default WelcomePage;\n","export default __webpack_public_path__ + \"static/media/treasure.5db996af.png\";","import React from 'react';\n\nimport {Box, Heading, Image, Text} from 'grommet';\nimport { FADE_IN } from '../constants';\nimport treasurePath from '../images/treasure.png';\n\ninterface Props {\n  title: string,\n  text: string[]\n}\n\nfunction FinalPage({title, text}: Props) {\n  return (\n    <Box\n      pad='large'\n      animation={{ type: 'fadeIn', duration: FADE_IN }}\n      align='center'\n    >\n      <Box align='center'>\n        <Heading textAlign='center' color='theme'>{title} complete!</Heading>\n        {text.map((text: string, index: number) => (\n          <Text key={`${index}`} textAlign={'center'}>{text}</Text>\n        ))}\n        <Image\n          width='100px'\n          src={treasurePath}\n        />\n      </Box>\n    </Box>\n  )\n}\n\nexport default FinalPage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport CluePage from './pages/CluePage.tsx';\nimport Skeleton from './skeleton/Skeleton.tsx';\n\nimport * as data from './data.json';\nimport WelcomePage from './pages/WelcomePage';\nimport FinalPage from './pages/FinalPage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nfunction Routes(){\n  const firstClueSlug = Object.keys(data.clues)[0];\n  const lastAnswerSlug = Object.values(data.clues).slice(-1)[0].answer;\n\n  return (\n  <Router>\n    <Skeleton>\n      <Switch>\n         {Object.entries(data.clues).map(([clueSlug, clue], index) => (\n          <Route path={`/treasure/${clueSlug}/`} key={`${index}`}>\n            <CluePage clue={clue}/>\n          </Route>\n         ))}\n         <Route path={`/treasure/${lastAnswerSlug}`}>\n          <FinalPage\n            title={data.name}\n            text={data.finalPageText}\n          />\n         </Route>\n         <Route path=\"/\">\n          <WelcomePage\n            title={data.name}\n            text={data.landingPageText}\n            firstClueSlug={firstClueSlug}\n          />\n         </Route>\n      </Switch>\n    </Skeleton>\n  </Router>\n  )\n}"],"sourceRoot":""}